{
	// @see https://www.typescriptlang.org/tsconfig#lib
	"compilerOptions": {
		// "strict": true,

		// Tells TypeScript to read JS files, as
		// normally they are ignored as source files
		"allowJs": false,

		//// "composite": true,

		// Generate d.ts files
		// "declaration": true,

		// go to js file when using IDE functions like
		// "Go to Definition" in VSCode
		// "declarationMap": true,

		// This compiler run should
		// only output d.ts files
		// "emitDeclarationOnly": true,

		// Allow default imports from modules
		// "allowSyntheticDefaultImports" : true,
		// "esModuleInterop": true,
		"noImplicitAny": true,

		// Default set of type definitions for built-in JS APIs
		"lib": ["es2016"],

		// Sets the module system for the program.
		// You very likely want "CommonJS" for node projects.
		"module": "commonjs",

		// Module resolution strategy
		// @see https://www.typescriptlang.org/tsconfig#moduleResolution
		//"moduleResolution": "node",

		//"noUnusedLocals": false,
		//"noUnusedParameters": false,

		// Types should go into this directory.
		// Removing this would place the .d.ts files
		// next to the .js files
		//"outDir": "dist",

		// Generate sourcemap files that let debuggers display the
		// original .ts code when working with the emitted files
		//"sourceMap": true,

		// Modern browsers support all ES6 features.
		"target": "es6",

		// By default all visible ”@types” packages are included.
		// If specified, only packages under typeRoots will be included.
		//"typeRoots": ["node_modules/@types"]
	},
	"files": [
	  "src/index.ts"
	]
	//"include": ["src/**/*"],
	//"exclude": ["node_modules", "**/*.spec.ts", "**/*.test.ts"]
}
